ERROR: [2] bootstrap checks failed
[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]

Elasticsearch uses a lot of file descriptors or file handles. Running out of file descriptors can be disastrous and will most probably lead to data loss. Make sure to increase the limit on the number of open files descriptors for the user running Elasticsearch to 65,536 or higher.

For the .zip and .tar.gz packages, set ulimit -n 65535 as root before starting Elasticsearch, or set nofile to 65535 in /etc/security/limits.conf.
On macOS, you must also pass the JVM option -XX:-MaxFDLimit to Elasticsearch in order for it to make use of the higher file descriptor limit.
RPM and Debian packages already default the maximum number of file descriptors to 65535 and do not require further configuration.

You can check the max_file_descriptors configured for each node using the Nodes stats API, with:

To check:
GET _nodes/stats/process?filter_path=**.max_file_descriptors

To fix:
sudo su
ulimit -n 65535

or edit /etc/security/limits.conf
For example:
elasticsearch     soft   nofile  100000
elk               soft   nofile  100000
elk               hard   nofile  100000

===================
ERROR: [1] bootstrap checks failed
Error: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
Elasticsearch uses a mmapfs directory by default to store its indices. The default operating system limits on mmap counts is likely to be too low, 
which may result in out of memory exceptions.

On Linux, you can increase the limits by running the following command as root:

sysctl -w vm.max_map_count=262144

To set this value permanently, update the vm.max_map_count setting in /etc/sysctl.conf. To verify after rebooting, run sysctl vm.max_map_count.
The RPM and Debian packages will configure this setting automatically. No further configuration is required.

forex:
[elk@ce1 ~]$ sudo vi /etc/sysctl.conf 
[elk@ce1 ~]$ sudo sysctl -p
vm.max_map_count = 262144

=================
