ES Important Settings
-------------------

path.data and path.logs :

For macOS .tar.gz, Linux .tar.gz, and Windows .zip installations, Elasticsearch writes data and logs 
to the respective data and logs subdirectories of $ES_HOME by default. 
However, files in $ES_HOME risk deletion during an upgrade.

In production, it is recommended to set the path.data and path.logs in elasticsearch.yml to locations 
outside of $ES_HOME.

path:
  data: /var/data/elasticsearch
  logs: /var/log/elasticsearch

We can specify multiple paths in path.data. Elasticsearch stores the node’s data across all provided paths 
but keeps each shard’s data on the same path.

For example:
path:
  data:
    - /mnt/elasticsearch_1
    - /mnt/elasticsearch_2
    - /mnt/elasticsearch_3

Elasticsearch does not balance shards across a node’s data paths. High disk usage in a single path can trigger a 
high disk usage watermark for the entire node. If triggered, Elasticsearch will not add shards to the node, 
even if the node’s other paths have available disk space. If you need additional disk space, 
we recommend you add a new node rather than additional data paths.

High disk usage watermark:
cluster.routing.allocation.disk.watermark.high
Controls the high watermark. It defaults to 90%, meaning that Elasticsearch will attempt to relocate shards away 
from a node whose disk usage is above 90%. It can also be set to an absolute byte value 
to relocate shards away from a node if it has less than the specified amount of free space. 
This setting affects the allocation of all shards, whether previously allocated or not.

Low disk usage watermark:
cluster.routing.allocation.disk.watermark.low 
Controls the low watermark for disk usage. It defaults to 85%, meaning that Elasticsearch will not allocate shards 
to nodes that have more than 85% disk used. It can also be set to an absolute byte value (like 500mb) to prevent 
Elasticsearch from allocating shards if less than the specified amount of space is available. This setting has 
no effect on the primary shards of newly-created indices but will prevent their replicas from being allocated.

For example:
PUT _cluster/settings
{
  "transient": {
    "cluster.routing.allocation.disk.watermark.low": "80gb",
    "cluster.routing.allocation.disk.watermark.high": "30gb",
    "cluster.routing.allocation.disk.watermark.flood_stage": "8gb",
    "cluster.info.update.interval": "1m"
  }
}
-----------------------
cluster.name:
#A node can only join a cluster when it shares its cluster.name with all the other nodes in the cluster.
#default: elasticsearch
cluster.name: mycluster

-----------------------
node.name:
#Elasticsearch uses node.name as a identifier for a particular instance of ES so it is included 
in the response of many APIs. It defaults to the hostname that the machine has when ES starts

node.name: master-node or
node.name: data-node or
node.name: ingest-node or
node.name: coord-node-only 

----------------------
network.host:
For development: By default, ES binds to loopback addresses only — e.g. 127.0.0.1 and [::1].
For production: to form a cluster with nodes on other servers, your node will need to bind to a non-loopback address.
network.host: <your node ip address>

The network.host setting also understands some special values such as _local_, _site_, _global_ and 
modifiers like :ip4 and :ip6

More details on network settings:
https://www.elastic.co/guide/en/elasticsearch/reference/7.8/modules-network.html
