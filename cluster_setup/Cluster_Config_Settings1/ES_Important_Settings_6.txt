Note** on Bootstrap Checks

Maximum map count check

Continuing from the previous point, to use mmap effectively, Elasticsearch also requires the ability to 
create many memory-mapped areas. The maximum map count check checks that the kernel allows a process to have 
at least 262,144 memory-mapped areas and is enforced on Linux only. 

To pass the maximum map count check, you must configure vm.max_map_count via sysctl to be at least 262144.

Alternatively, the maximum map count check is only needed if you are using mmapfs or hybridfs 
as the store type for your indices. 

If you do not allow the use of mmap then this bootstrap check will not be enforced.

--------------------
Client JVM check

There are two different JVMs provided by OpenJDK-derived JVMs: 
the client JVM and the server JVM. 

These JVMs use different compilers for producing executable machine code from Java bytecode. 
The client JVM is tuned for startup time and memory footprint while 
The server JVM is tuned for maximizing performance. 

The difference in performance between the two VMs can be substantial. 
The client JVM check ensures that Elasticsearch is not running inside the client JVM. 
To pass the client JVM check, you must start Elasticsearch with the server VM. 
On modern systems and operating systems, the server VM is the default.

----------------------

Use serial collector check:

There are various garbage collectors for the OpenJDK-derived JVMs targeting different workloads. 
The serial collector in particular is best suited for single logical CPU machines or extremely small heaps,
 neither of which are suitable for running Elasticsearch. 

Using the serial collector with Elasticsearch can be devastating for performance. 
The serial collector check ensures that Elasticsearch is not configured to run with the serial collector. 
To pass the serial collector check, you must not start Elasticsearch with the serial collector 
(whether it’s from the defaults for the JVM that you’re using, or you’ve explicitly specified it with -XX:+UseSerialGC).
 Note that the default JVM configuration that ships with Elasticsearch configures Elasticsearch to use the CMS collector.

------------------------

System call filter check:
Elasticsearch installs system call filters of various flavors depending on the operating system 
(e.g., seccomp on Linux). 
These system call filters are installed to prevent the ability to execute system calls related to forking 
as a defense mechanism against arbitrary code execution attacks on Elasticsearch. 
The system call filter check ensures that if system call filters are enabled, then they were successfully installed.
 To pass the system call filter check you must either fix any configuration errors on your system that prevented 
system call filters from installing (check your logs), or at your own risk disable system call filters by 
setting bootstrap.system_call_filter to false.

-------------------------

OnError and OnOutOfMemoryError checks

The JVM options OnError and OnOutOfMemoryError enable executing arbitrary commands if the JVM encounters
a fatal error (OnError) or an OutOfMemoryError (OnOutOfMemoryError). 

However, by default, Elasticsearch system call filters (seccomp) are enabled and these filters prevent forking.
 Thus, using OnError or OnOutOfMemoryError and system call filters are incompatible. 

The OnError and OnOutOfMemoryError checks prevent Elasticsearch from starting if either of these JVM options
 are used and system call filters are enabled. 
This check is always enforced. 

To pass this check do not enable OnError nor OnOutOfMemoryError; instead, upgrade to Java 8u92 
and use the JVM flag ExitOnOutOfMemoryError. 
While this does not have the full capabilities of OnError nor OnOutOfMemoryError, 
arbitrary forking will not be supported with seccomp enabled.

---------------------------
Early-access checks: related to ES upcoming releases

----------------------------
G1GC check
--check with JDK is being used.

Early versions of the HotSpot JVM that shipped with JDK 8 are known to have issues that can lead to 
index corruption when the G1GC collector is enabled. 
The versions impacted are those earlier than the version of HotSpot that shipped with JDK 8u40. 
The G1GC check detects these early versions of the HotSpot JVM.

----------------------
All permission check
The all permission check ensures that the security policy used during bootstrap does not grant the 
java.security.AllPermission to Elasticsearch. Running with the all permission granted is equivalent to 
disabling the security manager.

-------------------
Discovery configuration check
By default, when Elasticsearch first starts up it will try and discover other nodes 
running on the same host. If no elected master can be discovered within a few seconds 
then Elasticsearch will form a cluster that includes any other nodes that were discovered. 

This bootstrap check ensures that discovery is not running with the default configuration. 
It can be satisfied by setting at least one of the following properties:

discovery.seed_hosts
discovery.seed_providers
cluster.initial_master_nodes

--------------------


