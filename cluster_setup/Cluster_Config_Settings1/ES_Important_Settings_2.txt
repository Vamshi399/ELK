ES Important Settings
-------------------

For node discovery and master node election:

edit under discovery section (v7.8)
discovery.seed_hosts
cluster.initial_master_nodes

edit under discovery section (v6.8)
discovery.zen.ping.unicast.hosts
discovery.zen.minimum_master_nodes

-----
discovery.seed_hosts or discovery.zen.ping.unicast.hosts

Out of the box, without any network configuration, ES binds to available loopback addresses 
and will scan local ports 9300 to 9305 to try to connect to other nodes running on the same server.
This provides an auto-clustering experience without having to do any configuration.

To form a cluster edit discovery.seed_hosts setting to provide a list of other nodes in the cluster 
that are master-eligible and likely to be live and contactable in order to seed the discovery process.
This setting should be a list of the addresses of all the master-eligible nodes in the cluster.
Each address can be either an IP address or a hostname which resolves to one or more IP addresses via DNS.

If your master-eligible nodes do not have fixed names or addresses, 
use an alternative hosts provider to find their addresses dynamically.

Alternative hosts provider:
EC2 hosts provider
The EC2 discovery plugin adds a hosts provider that uses the AWS API to find a list of seed nodes.
https://www.elastic.co/guide/en/elasticsearch/plugins/7.8/discovery-ec2.html
AWS API: https://github.com/aws/aws-sdk-java

Azure Classic hosts provider
The Azure Classic discovery plugin adds a hosts provider that uses the Azure Classic API find a list of seed nodes.
https://www.elastic.co/guide/en/elasticsearch/plugins/7.8/discovery-azure-classic.html

Google Compute Engine hosts provider
The GCE discovery plugin adds a hosts provider that uses the GCE API find a list of seed nodes.
https://www.elastic.co/guide/en/elasticsearch/plugins/7.8/discovery-gce.html

--------------
cluster.initial_master_nodes or discovery.zen.minimum_master_nodes

when starting a new ES cluster bootstrapping step determines the set of master-eligible nodes whose votes are counted
in the very first election. 
In development mode, with no discovery settings configured, this step is automatically performed by the nodes themselves. 
As this auto-bootstrapping is inherently unsafe, when you start a new cluster in production mode, 
you must explicitly list the master-eligible nodes whose votes should be counted in the very first election. 

Note**You should not use this setting when restarting a cluster or adding a new node to an existing cluster.

For example:
discovery.seed_hosts:
   - 192.168.1.10:9300
   - 192.168.1.11 ---1
   - seeds.mydomain.com ---2
   - [0:0:0:0:0:ffff:c0a8:10c]:9301 ---3
cluster.initial_master_nodes: ---4
   - master-node-a
   - master-node-b
   - master-node-c

	
1.Optional port and usually defaults to 9300, but this default can be overridden 


2.If a hostname resolves to multiple IP addresses then the node will attempt to discover other nodes 
  at all resolved addresses.

3. IPv6 addresses must be enclosed in square brackets.


4. The initial master nodes should be identified by their node.name, which defaults to their hostname. 
   Make sure that the value in cluster.initial_master_nodes matches the node.name exactly. 
   If you use a fully-qualified domain name such as master-node-a.example.com for your node names 
   then you must use the fully-qualified name in this list; conversely if node.name is a bare hostname 
   without any trailing qualifiers then you must also omit the trailing qualifiers in cluster.initial_master_nodes.



