#setup ES cluster and kibana with it in secure way(7.8.x)

#my /etc/hosts contains following enteries:
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.251.47 ce1.example.com ce1
192.168.251.48 ce2.example.com ce2
192.168.251.49 ce3.example.com ce3
192.168.251.63 ce4.example.com ce4

#node1(ce1),node2(ce2) and node3(ce3) has the following
[elk@ce1 ~]$ ls -all /usr/local/
total 4
drwxr-xr-x. 18 root root 4096 
drwxr-xr-x. 13 root root  155
drwxr-xr-x.  2 root root    6 bin
lrwxrwxrwx.  1 elk  elk    19 elasticsearch -> elasticsearch-7.8.0
drwxr-xr-x.  9 elk  elk   175 elasticsearch-6.8.13
drwxr-xr-x. 10 elk  elk   167 elasticsearch-7.8.0
lrwxrwxrwx.  1 elk  elk    25 kibana -> kibana-7.8.0-linux-x86_64
drwxr-xr-x. 13 elk  elk   246 kibana-6.8.13-linux-x86_64
drwxr-xr-x. 13 elk  elk   266 kibana-7.8.0-linux-x86_64

---------------------
#my .bashrc
# .bashrc
export ELASTICSEARCH_HOME=/usr/local/elasticsearch
export PATH=$PATH:$ELASTICSEARCH_HOME/bin
export KIBANA_HOME=/usr/local/kibana
export PATH=$PATH:$KIBANA_HOME/bin

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
----------------------
#
Configure SSL/TLS encryption

When Elasticsearch security is enabled for a cluster that is running with a basic or production license, the use of TLS/SSL for transport communications is obligatory so you must configure SSL/TLS encryption. Additionally, once security has been enabled to secure elasticsearch, all communications to an Elasticsearch cluster must be authenticated, including communications from Kibana and/or application servers.

Elasticsearch has two levels of communications,

    Transport Communications: The transport protocol is used for internal communications between Elasticsearch nodes,
    HTTP Communications:  HTTP protocol is used for communications from clients to the Elasticsearch cluster.

Elasticsearch comes with a utility called elasticsearch-certutil that can be used for generating self signed certificates that can be used to secure elasticsearch for encrypting internal communications within an Elasticsearch cluster.

Using a yml file as an input to generate self signed certificates to enable https configuration and secure elasticsearch. 

$vi instances.yml

instances:
  - name: 'node1'
    dns: [ 'ce1.example.com' ]
    ip: [ '192.168.251.47' ]
  - name: 'node2'
    dns: [ 'ce2.example.com' ]
    ip: [ '192.168.251.48' ]
  - name: 'node3'
    dns: [ 'ce3.example.com' ]
    ip: [ '192.168.251.49' ]

#Generate self signed certificate

The elasticsearch-certutil command simplifies the process of generating self signed certificate for the Elastic Stack to enable HTTPS configuration and to secure elasticsearch. It takes care of generating a CA and signing certificates with the CA.

$[elk@ce1 ~]$ pwd
/home/elk

$elasticsearch-certutil cert --keep-ca-key ca --pem --in instance.yml --out certs.zip
$mv /usr/local/elasticsearch/certs.zip /home/elk/
$unzip certs.zip

#creates 4 folders, [ca,node1,node2,node3]
$[elk@ce1 ~]$ ls ca
ca.crt  ca.key
$[elk@ce1 ~]$ ls node1
node1.crt  node1.key
$[elk@ce1 ~]$ ls node2
node2.crt  node2.key
$[elk@ce1 ~]$ ls node3
node3.crt  node3.key

#to enable HTTPS configuration create certs directory inside /usr/local/elasticsearch/config on all the cluster nodes to store the self signed certificates
$[elk@ce1# mkdir -p /usr/local/elasticsearch/config/certs
$[elk@ce2# mkdir -p /usr/local/elasticsearch/config/certs
$[elk@ce3# mkdir -p /usr/local/elasticsearch/config/certs
$[elk@ce1# mkdir -p /usr/local/kibana/config/certs

$elk@ce1# cp ca/ca.crt node1/* /usr/local/elasticsearch/config/certs/
$scp ca/ca.crt node2/* elk@ce2:/usr/local/elasticsearch/config/certs/
$scp ca/ca.crt node3/* elk@ce3:/usr/local/elasticsearch/config/certs/
$elk@ce1# cp ca/ca.crt node1/* /usr/local/kibana/config/certs/

#Enable authentication to secure Elasticsearch
set xpack.security.enabled to true on all nodes
With this to gain access to restricted resources, a user must prove their identity, via passwords, credentials, or some other means (typically referred to as authentication tokens). The Elastic Stack authenticates users by identifying the users behind the requests that hit the cluster and verifying that they are who they claim to be. The authentication process is handled by one or more authentication services called realms.

Enable SSL/TLS to encrypt communication between cluster nodes
The transport protocol is used for communication between nodes to secure Elasticsearch cluster. Because each node in an Elasticsearch cluster is both a client and a server to other nodes in the cluster, all transport certificates must be both client and server certificates.
add properties xpack.security.transport.ssl.* as shown in configs files for each node


Enable HTTPS configuration to encrypt HTTP Client Communications
When security features are enabled, you can optionally use TLS to enable HTTPS configuration and to ensure that communication between HTTP clients and the cluster is encrypted.
add properties xpack.security.http.ssl.* as shown in config files for each node

start elasticsearch on each node:
$ce1:elasticsearch
$ce2:elasticsearch
$ce3:elasticsearch

#check status of cluster
$curl --cacert /usr/local/elasticsearch/config/certs/ca.crt -XGET https://ce1.example.com:9200/_cat/nodes?pretty
--might show error missing authentication credentials for REST request--

#Since we have enabled security features to secure elasticsearch, we will use username password of either any built in user or a file user to authorise the API request. 

#By default we do not know the default password of the built-in users. So we will change the password of all the built-in user using elasticsearch-setup-passwords. 
we can use bin/elasticsearch-setup-passwords auto which generated random passwords,instead we will create custom passwords

[if it complains about elasticsearch.keystore not available, we can create one using
$elasticsearch-keystore create 

#then lets set password (abcd@1234)

$elasticsearch-setup-passwords interactive
Initiating the setup of passwords for reserved users elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user.
You will be prompted to enter passwords as the process progresses.
Please confirm that you would like to continue [y/N]y


Enter password for [elastic]:
Reenter password for [elastic]:
Enter password for [apm_system]:
Reenter password for [apm_system]:
Enter password for [kibana]:
Reenter password for [kibana]:
Enter password for [logstash_system]:
Reenter password for [logstash_system]:
Enter password for [beats_system]:
Reenter password for [beats_system]:
Enter password for [remote_monitoring_user]:
Reenter password for [remote_monitoring_user]:
Changed password for user [apm_system]
Changed password for user [kibana]
Changed password for user [logstash_system]
Changed password for user [beats_system]
Changed password for user [remote_monitoring_user]
Changed password for user [elastic]

#check the status of cluster
$curl --cacert /usr/local/elasticsearch/certs/ca.crt -u elastic -XGET https://ce1.example.com:9200/_cat/nodes?pretty

Enter host password for user 'elastic':
192.168.251.47 20 90 44 2.45 2.79 2.45 dilmrt * node1
192.168.251.49 43 67  1 0.00 0.03 0.05 dilmrt - node3
192.168.251.48 45 48  0 0.01 0.02 0.05 dilmrt - node2

###Cluster is setup with security & encryption


#to setup kibana to interact with secure ES cluster
refer kibana.yml file in kibana folder

Optional:If you prefer not to put your user ID and password in the kibana.yml file while you configure Kibana, store them in a keystore instead. Run the following commands to create the Kibana keystore and add the secure settings:

#we add allow-root is we used root for all our setup
kibana-keystore create --allow-root
kibana-keystore add elasticsearch.username --allow-root
kibana-keystore add elasticsearch.password --allow-root

Enable HTTPS Communication 
You can choose to avoid this step but this is recommended to enhance the security by passing the traffic on HTTPS
Certificates that will be used for PKI authentication must be signed by the same CA as the certificates that are used for encrypting http communications. Normally, these would be signed by an official CA within an organization. However, because we have already created CA and other certificates we will use the same to enable https communication for Kibana.

Assuming you have already copied the ca.crt,node1.crt and node1.key in /usr/local/kibana/config/certs/
edit the properties as shown in kibana.yml file


server.ssl.enabled: Enables SSL for outgoing requests from the Kibana server to the browser. When set to true, server.ssl.certificate and server.ssl.key are required.
server.ssl.certificate and server.ssl.key: Paths to the PEM-format SSL certificate and SSL key files, respectively.
elasticsearch.ssl.certificateAuthorities: Optional setting that enables you to specify a list of paths to the PEM file for the certificate authority for your Elasticsearch instance.
elasticsearch.ssl.verificationMode: Controls the verification of certificates presented by Elasticsearch. Valid values are none, certificate, and full. full performs hostname verification, and certificate does not.

start kibana
$ce1:kibana

https://ce1.example.com:5601
Log in using the elastic user and the password that we created
